//// Created by sapiest on 05.10.2019.//#pragma once#include <filesystem>#include "../../src/Utils/Headers/CommonUtils.h"#include "../../src/Utils/Headers/Constants.h"#include "gtest/gtest.h"std::string serv_dir = "../Server";std::string test_dir = "../Tests";class TestUtils {   public:    static void clear() {        std::string command;        for (const auto& file : std::filesystem::directory_iterator(serv_dir)) {            std::string path = file.path().string();            path.erase(path.begin(), path.begin() + serv_dir.size()+1);            if (std::filesystem::is_directory(file.path()) and path != "CMakeFiles") {                std::filesystem::remove_all(file.path());            }        }        for (const auto& file : std::filesystem::directory_iterator(test_dir)) {            std::string path = file.path().string();            path.erase(path.begin(), path.begin() + test_dir.size()+1);            if (std::filesystem::is_directory(file.path()) and path != "CMakeFiles") {                std::filesystem::remove_all(file.path());            }        }    }    static void kill() {        const std::string name_ = "Server";        std::string command;#ifdef __WIN32        command = "taskkill /IM " + name_ + ".exe /F";#elif __linux        command = "killall -KILL " + name_;#endif        std::system(command.c_str());    }    static void run() {        const std::string name_ = "Server";        const std::string directory_ = "..\\Server\\";        std::string command;#ifdef __WIN32        command = "start cmd.exe /c \"" + directory_ + name_ + ".exe\"";#elif __linux        command = "cd " + directory_ + " && ./" + name_ + " ; cd -";#endif        std::system(command.c_str());    }    static void checkRequests(const std::vector<std::pair<std::string, std::string>> &requests) {        Client client;        for (const auto &request : requests) {            client.execRequest(request.first);            EXPECT_EQ(client.response, request.second);        }    }};